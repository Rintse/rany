-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module Syntax.Grammar.Abs where

import Prelude (Double, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Exp
    = Var Ident
    | BTrue
    | BFalse
    | DVal Double
    | Rand
    | App Exp Exp
    | InL Exp
    | InR Exp
    | Fst Exp
    | Snd Exp
    | Min Exp
    | Sqrt Exp
    | Sin Exp
    | Cos Exp
    | EPow Exp
    | Mul Exp Exp
    | Div Exp Exp
    | Mod Exp Exp
    | Add Exp Exp
    | Sub Exp Exp
    | Eq Exp Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | Neq Exp Exp
    | Leq Exp Exp
    | Geq Exp Exp
    | Not Exp
    | And Exp Exp
    | Or Exp Exp
    | Ite Exp Exp Exp
    | Match Exp Ident Exp Ident Exp
    | Tup Exp Exp
    | Abstr Ident Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TDouble
    | TBool
    | TProd Type Type
    | TFun Type Type
    | TCoprod Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

