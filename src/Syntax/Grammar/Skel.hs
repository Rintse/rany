-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Syntax.Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Syntax.Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Syntax.Grammar.Abs.Ident -> Result
transIdent x = case x of
  Syntax.Grammar.Abs.Ident string -> failure x

transExp :: Syntax.Grammar.Abs.Exp -> Result
transExp x = case x of
  Syntax.Grammar.Abs.Var ident -> failure x
  Syntax.Grammar.Abs.BTrue -> failure x
  Syntax.Grammar.Abs.BFalse -> failure x
  Syntax.Grammar.Abs.DVal double -> failure x
  Syntax.Grammar.Abs.Rand -> failure x
  Syntax.Grammar.Abs.App exp1 exp2 -> failure x
  Syntax.Grammar.Abs.InL exp -> failure x
  Syntax.Grammar.Abs.InR exp -> failure x
  Syntax.Grammar.Abs.Fst exp -> failure x
  Syntax.Grammar.Abs.Snd exp -> failure x
  Syntax.Grammar.Abs.Min exp -> failure x
  Syntax.Grammar.Abs.Sqrt exp -> failure x
  Syntax.Grammar.Abs.Sin exp -> failure x
  Syntax.Grammar.Abs.Cos exp -> failure x
  Syntax.Grammar.Abs.EPow exp -> failure x
  Syntax.Grammar.Abs.Mul exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Div exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Mod exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Add exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Sub exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Eq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Lt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Gt exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Neq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Leq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Geq exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Not exp -> failure x
  Syntax.Grammar.Abs.And exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Or exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Ite exp1 exp2 exp3 -> failure x
  Syntax.Grammar.Abs.Match exp1 ident1 exp2 ident2 exp3 -> failure x
  Syntax.Grammar.Abs.Tup exp1 exp2 -> failure x
  Syntax.Grammar.Abs.Abstr ident exp -> failure x

transType :: Syntax.Grammar.Abs.Type -> Result
transType x = case x of
  Syntax.Grammar.Abs.TDouble -> failure x
  Syntax.Grammar.Abs.TBool -> failure x
  Syntax.Grammar.Abs.TProd type_1 type_2 -> failure x
  Syntax.Grammar.Abs.TFun type_1 type_2 -> failure x
  Syntax.Grammar.Abs.TCoprod type_1 type_2 -> failure x
